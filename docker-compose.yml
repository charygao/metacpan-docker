---
version: "3.4"

#  ____  _____ ______     _____ ____ _____ ____
# / ___|| ____|  _ \ \   / /_ _/ ___| ____/ ___|
# \___ \|  _| | |_) \ \ / / | | |   |  _| \___ \
#  ___) | |___|  _ < \ V /  | | |___| |___ ___) |
# |____/|_____|_| \_\ \_/  |___\____|_____|____/
#

services:
  #     __                  _____ __
  #    / /__________ ____  / __(_) /__
  #   / __/ ___/ __ `/ _ \/ /_/ / //_/         __
  #  / /_/ /  / /_/ /  __/ __/ / ,<          _| =\__
  #  \__/_/   \__,_/\___/_/ /_/_/|_|        /o____o_\

  traefik:
    # The official v2.0 Traefik docker image
    image: traefik:v2.0
    networks:
      - traefik-network
    # Enables the web UI and tells Traefik to listen to docker
    command:
      - "--api.insecure=true"
      - "--providers.docker"
      # Do not expose containers unless explicitly told so
      - "--providers.docker.exposedbydefault=false"
    ports:
      # The HTTP port
      - "80:80"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock

  #  _                                   _
  # | | ___   __ _ ___ _ __   ___  _   _| |_
  # | |/ _ \ / _` / __| '_ \ / _ \| | | | __|
  # | | (_) | (_| \__ \ |_) | (_) | |_| | |_
  # |_|\___/ \__, |___/ .__/ \___/ \__,_|\__|
  #          |___/    |_|
  #

  logspout:
    image: honeycombio/logspout-honeycomb:1.13
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
    env_file:
      - logging.env
    ports:
      - "8100:80"

  #               _
  # __      _____| |__
  # \ \ /\ / / _ \ '_ \
  #  \ V  V /  __/ |_) |
  #   \_/\_/ \___|_.__/
  #

  web:
    depends_on:
      - traefik
    image: metacpan/metacpan-web:latest
    build:
      context: ./src/metacpan-web
    volumes:
      - type: volume
        source: web_carton
        target: /carton
      - type: bind
        source: ./configs/metacpan-web/metacpan_web.conf
        target: /metacpan-web/metacpan_web.conf
        read_only: true
      - type: bind
        source: ./src/metacpan-web
        target: /metacpan-web
        read_only: true
    ports:
      - "5001:5001"
    networks:
      - web-network
      - traefik-network
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-network"
      - "traefik.http.routers.web.rule=Host(`web.metacpan.localhost`)"
      - "traefik.http.services.web.loadbalancer.server.port=5001"

  #              _
  #   __ _ _ __ (_)
  #  / _` | '_ \| |
  # | (_| | |_) | |
  #  \__,_| .__/|_|
  #       |_|
  #

  api:
    depends_on:
      - elasticsearch
      - pgdb
      - traefik
    image: metacpan/metacpan-api:latest
    build:
      context: ./src/metacpan-api
    env_file:
      - localapi.env
    command: >
      /metacpan-api/wait-for-es.sh http://elasticsearch:9200 --
      /metacpan-api/wait-for-it.sh -t 15 -s ${PGDB} --
      ${API_SERVER} ./bin/api.pl
    volumes:
      - type: volume
        source: cpan
        target: /CPAN
      - type: bind
        source: ./src/metacpan-api
        target: /metacpan-api
      - type: bind
        source: ./configs/metacpan-api/metacpan_server.conf
        target: /metacpan-api/metacpan_server.conf
        read_only: true
      - type: bind
        source: ./configs/metacpan-api/metacpan_server_testing.conf
        target: /metacpan-api/metacpan_server_testing.conf
        read_only: true
      - type: bind
        source: ./configs/metacpan-api/metacpan.pl
        target: /metacpan-api/etc/metacpan.pl
        read_only: true
      - type: bind
        source: ./bin/index-cpan.sh
        target: /bin/index-cpan.sh
        read_only: true
      - type: bind
        source: ./bin/partial-cpan-mirror.sh
        target: /bin/partial-cpan-mirror.sh
        read_only: true
    ports:
      - "5000:5000"
    networks:
      - database
      - elasticsearch
      - traefik-network
      - web-network
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-network"
      - "traefik.http.routers.api.rule=Host(`api.metacpan.localhost`)"
      - "traefik.http.services.api.loadbalancer.server.port=5000"

  api_test:
    depends_on:
      - elasticsearch_test
      - pgdb
      - traefik
    image: metacpan/metacpan-api:latest
    build:
      context: ./src/metacpan-api
    env_file:
      - localapi_test.env
    command: >
      /metacpan-api/wait-for-es.sh http://elasticsearch_test:9200 --
      /metacpan-api/wait-for-it.sh -t 15 -s ${PGDB} --
      ${API_SERVER} ./bin/api.pl
    volumes:
      - type: volume
        source: cpan
        target: /CPAN
      - type: bind
        source: ./src/metacpan-api
        target: /metacpan-api
      - type: bind
        source: ./configs/metacpan-api/metacpan_server.conf
        target: /metacpan-api/metacpan_server.conf
        read_only: true
      - type: bind
        source: ./configs/metacpan-api/metacpan_server_testing.conf
        target: /metacpan-api/metacpan_server_testing.conf
        read_only: true
      - type: bind
        source: ./configs/metacpan-api/metacpan.pl
        target: /metacpan-api/etc/metacpan.pl
        read_only: true
      - type: bind
        source: ./bin/index-cpan.sh
        target: /bin/index-cpan.sh
        read_only: true
      - type: bind
        source: ./bin/partial-cpan-mirror.sh
        target: /bin/partial-cpan-mirror.sh
        read_only: true
    ports:
      - "5000:5000"
    networks:
      - database
      - elasticsearch_test
      - traefik-network
      - web-network
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-network"
      - "traefik.http.routers.api.rule=Host(`api.metacpan.localhost`)"
      - "traefik.http.services.api.loadbalancer.server.port=5000"
  #        _ _   _           _                           _
  #   __ _(_) |_| |__  _   _| |__    _ __ ___   ___  ___| |_ ___
  #  / _` | | __| '_ \| | | | '_ \  | '_ ` _ \ / _ \/ _ \ __/ __|
  # | (_| | | |_| | | | |_| | |_) | | | | | | |  __/  __/ |_\__ \
  #  \__, |_|\__|_| |_|\__,_|_.__/  |_| |_| |_|\___|\___|\__|___/
  #  |___/
  #
  #   ___ _ __   __ _ _ __
  #  / __| '_ \ / _` | '_ \
  # | (__| |_) | (_| | | | |
  #  \___| .__/ \__,_|_| |_|
  #      |_|
  #
  github-meets-cpan:
    image: metacpan/github-meets-cpan:latest
    command: "/wait-for-it.sh mongodb:27017 -- morbo script/app.pl"
    depends_on:
      - mongodb
      - logspout
      - traefik
    networks:
      - mongo
      - traefik-network
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-network"
      - "traefik.http.routers.github-meets-cpan.rule=Host(`gh.metacpan.localhost`)"
      - "traefik.http.services.gh-meet-cpan-web.loadbalancer.server.port=3000"

  #        _ _   _           _                           _
  #   __ _(_) |_| |__  _   _| |__    _ __ ___   ___  ___| |_ ___
  #  / _` | | __| '_ \| | | | '_ \  | '_ ` _ \ / _ \/ _ \ __/ __|
  # | (_| | | |_| | | | |_| | |_) | | | | | | |  __/  __/ |_\__ \
  #  \__, |_|\__|_| |_|\__,_|_.__/  |_| |_| |_|\___|\___|\__|___/
  #  |___/
  #
  #   ___ _ __   __ _ _ __     ___ _ __ ___  _ __
  #  / __| '_ \ / _` | '_ \   / __| '__/ _ \| '_ \
  # | (__| |_) | (_| | | | | | (__| | | (_) | | | |
  #  \___| .__/ \__,_|_| |_|  \___|_|  \___/|_| |_|
  #      |_|
  #

  github-meets-cpan-cron:
    image: metacpan/github-meets-cpan:latest
    command: "/wait-for-it.sh mongodb:27017 -- perl cron/update.pl"
    depends_on:
      - mongodb
    volumes:
      - type: bind
        source: ${MC_CONF_PRIVATE_DIR:-.}/github-meets-cpan/environment.json
        target: /code/environment.json
        read_only: true
    networks:
      - mongo

  #   __ _ _ __ ___ _ __
  #  / _` | '__/ _ \ '_ \
  # | (_| | | |  __/ |_) |
  #  \__, |_|  \___| .__/
  #   __/ |        | |
  #  |___/         |_|

  grep:
    depends_on:
      - traefik
    image: metacpan/metacpan-grep-front-end:latest
    build:
      context: ./src/metacpan-grep-front-end
    volumes:
      - type: volume
        source: metacpan_git_shared
        target: /shared/metacpan_git
        read_only: true
      - type: bind
        source: ./src/metacpan-grep-front-end
        target: /metacpan-grep-front-end
        read_only: true
    env_file:
      - grep.env
    networks:
      - traefik-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grep.rule=Host(`grep.metacpan.localhost`)"
      - "traefik.http.services.grep-web.loadbalancer.server.port=3000"

  #  ____    _  _____  _    ____    _    ____  _____ ____
  # |  _ \  / \|_   _|/ \  | __ )  / \  / ___|| ____/ ___|
  # | | | |/ _ \ | | / _ \ |  _ \ / _ \ \___ \|  _| \___ \
  # | |_| / ___ \| |/ ___ \| |_) / ___ \ ___) | |___ ___) |
  # |____/_/   \_\_/_/   \_\____/_/   \_\____/|_____|____/
  #

  #       _           _   _                              _
  #   ___| | __ _ ___| |_(_) ___ ___  ___  __ _ _ __ ___| |__
  #  / _ \ |/ _` / __| __| |/ __/ __|/ _ \/ _` | '__/ __| '_ \
  # |  __/ | (_| \__ \ |_| | (__\__ \  __/ (_| | | | (__| | | |
  #  \___|_|\__,_|___/\__|_|\___|___/\___|\__,_|_|  \___|_| |_|
  #

  elasticsearch:
    image: elasticsearch:2.4
    volumes:
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
      - type: bind
        source: ./elasticsearch/metacpan.yml
        target: /usr/share/elasticsearch/config/metacpan.yml
        read_only: true
      - type: bind
        source: ./elasticsearch/scripts
        target: /usr/share/elasticsearch/config/scripts
        read_only: true
    ports:
      - "9200:9200"
    networks:
      - elasticsearch

  #       _           _   _                              _
  #   ___| | __ _ ___| |_(_) ___ ___  ___  __ _ _ __ ___| |__
  #  / _ \ |/ _` / __| __| |/ __/ __|/ _ \/ _` | '__/ __| '_ \
  # |  __/ | (_| \__ \ |_| | (__\__ \  __/ (_| | | | (__| | | |
  #  \___|_|\__,_|___/\__|_|\___|___/\___|\__,_|_|  \___|_| |_|
  #
  #  _            _
  # | |_ ___  ___| |_
  # | __/ _ \/ __| __|
  # | ||  __/\__ \ |_
  #  \__\___||___/\__|
  #

  elasticsearch_test:
    image: elasticsearch:2.4
    volumes:
      - type: volume
        source: elasticsearch_test
        target: /usr/share/elasticsearch/data
      - type: bind
        source: ./elasticsearch/test.yml
        target: /usr/share/elasticsearch/config/test.yml
        read_only: true
      - type: bind
        source: ./elasticsearch/scripts
        target: /usr/share/elasticsearch/config/scripts
        read_only: true
    ports:
      - "9200:9200"
    networks:
      - elasticsearch_test
  #                  _                            _
  #  _ __   ___  ___| |_ __ _ _ __ ___  ___  __ _| |
  # | '_ \ / _ \/ __| __/ _` | '__/ _ \/ __|/ _` | |
  # | |_) | (_) \__ \ || (_| | | |  __/\__ \ (_| | |
  # | .__/ \___/|___/\__\__, |_|  \___||___/\__, |_|
  # |_|                 |___/                  |_|
  #

  pgdb:
    hostname: pgdb
    image: "postgres:${PG_VERSION_TAG:-9.6-alpine}"
    build:
      context: "./pg"
      args:
        PG_TAG: "${PG_VERSION_TAG:-9.6-alpine}"
    networks:
      - database
    healthcheck:
      interval: 10s
      timeout: 1s
      retries: 0
      start_period: 480s
      test: ["CMD", "/healthcheck.sh"]
    volumes:
      - type: volume
        source: pgdb-data
        target: /var/lib/postgresql/data
      - type: bind
        source: ./pg/docker-entrypoint-initdb.d
        target: /docker-entrypoint-initdb.d
        read_only: true
      - type: bind
        source: ./pg/healthcheck.sh
        target: /healthcheck.sh
        read_only: true

  #                                        _ _
  #  _ __ ___   ___  _ __   __ _  ___   __| | |__
  # | '_ ` _ \ / _ \| '_ \ / _` |/ _ \ / _` | '_ \
  # | | | | | | (_) | | | | (_| | (_) | (_| | |_) |
  # |_| |_| |_|\___/|_| |_|\__, |\___/ \__,_|_.__/
  #                        |___/
  #

  mongodb:
    image: mongo:latest
    networks:
      - mongo
    healthcheck:
      interval: 10s
      timeout: 10s
      retries: 0
      start_period: 40s
      test: echo 'db.runCommand("ping").ok' | mongo mongodb:27017/test --quiet

#  _   _ _____ _______        _____  ____  _  ______
# | \ | | ____|_   _\ \      / / _ \|  _ \| |/ / ___|
# |  \| |  _|   | |  \ \ /\ / / | | | |_) | ' /\___ \
# | |\  | |___  | |   \ V  V /| |_| |  _ <| . \ ___) |
# |_| \_|_____| |_|    \_/\_/  \___/|_| \_\_|\_\____/
#

networks:
  database:
  elasticsearch:
  elasticsearch_test:
  mongo:
  traefik-network:
  web-network:

# __     _____  _    _   _ __  __ _____ ____
# \ \   / / _ \| |  | | | |  \/  | ____/ ___|
#  \ \ / / | | | |  | | | | |\/| |  _| \___ \
#   \ V /| |_| | |__| |_| | |  | | |___ ___) |
#    \_/  \___/|_____\___/|_|  |_|_____|____/
#

volumes:
  web_carton:
  api_carton:
  cpan:
  elasticsearch:
  elasticsearch_test:
  pgdb-data:
  metacpan_git_shared:
    external: true
